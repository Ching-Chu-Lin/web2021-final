type Query {
  # Record
  queryUserRecords(patientName: String!): [Record!]
  queryUserRecordsByDate(patientName: String!, date: String!): Record
  # Appointment
  queryAppointment(date: String!): DailyAppointmentReturn!
  # Openday
  queryOpenday: [Openday!]
}

type Mutation {
  # User
  login(data: UserInput!): AuthData!
  createUser(data: UserInput!): Boolean!
  deleteUser(username: String!): Boolean!
  updateUserUsername(auth: UserInput!, newUsername: String!): Boolean!
  updateUserPassword(auth: UserInput!, newPassword: String!): Boolean!
  # Appointment
  createAppointment(data: CreatAppointmentInput!): Appointment! # create / update
  deleteAppointment(date: String!): Appointment!
  # Record
  createRecord(data: CreateRecordInput!): Record! # create / update
  # Openday
  createOpenday(data: OpendayInput!): Openday!
  deleteOpenday(weekday: Weekday!): Openday!
}

enum Weekday {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

input OpendayInput {
  weekday: Weekday!
  doctor: String!
}

type Openday {
  weekday: Weekday!
  doctor: String!
}

input UserInput {
  username: String!
  password: String!
  identity: String!
}

type User {
  id: ID!
  username: String!
  password: String!
  identity: String!
  records: [Record!]
}

type AuthData {
  username: String!
  identity: String!
  token: String!
}

input CreateRecordInput {
  patientName: String! #username
  date: String!
  part: String!
  level: Int!
  description: String
  injury: String!
  treatment: String!
}

type Record {
  id: ID!
  date: String!
  part: String!
  level: Int!
  description: String
  injury: String!
  treatment: String!
}

input CreatAppointmentInput {
  date: String!
  part: String!
  level: Int!
  description: String
}

type Appointment {
  id: ID!
  date: String!
  patient: User!
  part: String!
  level: Int!
  description: String
}

type DailyAppointmentReturn {
  doctor: String
  number: Int
  appointments: [Appointment!]
}
