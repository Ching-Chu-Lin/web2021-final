type Query {
  queryUser(username: String!): User!
  queryAppointment(date: String!): [Appointment!]
  queryOpenday: [Weekday!]
}

type Mutation {
  signup(data: CreateUserInput!): User! #createUser
  login(username: String, password: String): User!

  deleteUser(id: ID!): User!
  updateUserUsername(id: ID!, username: String!): User!
  updateUserPassword(id: ID!, password: String!): User!

  createAppointment(data: CreatAppointmentInput!): Appointment!
  deleteAppointment(id: ID!): Appointment!
  updateAppointmentDescription(id: ID!, description: String): Appointment!

  createOpenday(weekday: Weekday): Weekday!
  deleteOpenday(weekday: Weekday): Weekday!
}

enum Weekday {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

input CreateUserInput {
  username: String!
  password: String!
  identity: String!
}

type User {
  id: ID!
  username: String!
  password: String!
  identity: String!
  record: [String!]
}

input CreatAppointmentInput {
  date: String!
  username: String!
  description: String
}

type Appointment {
  id: ID!
  date: String!
  patient: User!
  description: String
}
